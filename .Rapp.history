a<-2
a
source("/Users/wlasiuk/Desktop/testMacR.R")
a
b
clear
ls
ls()
a
b
c <- a+b
c
a
b
a
b
c
cd
ls()
c + a + b^3
a
c
a
hell
hello
ls()
q()
a
hello
a
hello
a
hello
a
b
c
ls()
c <- 2^a
c
hello
c
hell
c
a
hell
hello
c
a
hello
why not
ls
ls()
clear
what
ls
a
ls()
pwd
pwd()
get pwd()
get pwd
help (pwd)
ls ()
cls
cls()
> cls <- function () {#
>        require(RDCOMClient)#
>        wsh <- COMCreate("Wscript.Shell")#
>        wsh$SendKeys("\f")#
>        invisible(wsh)#
> }#
> cls()#
cls()
> cls <- function () {#
>        require(RDCOMClient)#
>        wsh <- COMCreate("Wscript.Shell")#
>        wsh$SendKeys("\f")#
>        invisible(wsh)#
> }#
> cls()#
cls <- function () {#
require(RDCOMClient)#
wsh <- COMCreate("Wscript.Shell")
wsh$SendKeys("\f")
invisible(wsh)#
}
cls()
install.packages("RDCOMClient")
install.packages("quatmod")
install.packages("quantmod")
install.packages("RDCOMClient")
.Libpath()
.Libpaths()
.LibPath()
.libPath()
.libPaths()
cwd
wd
wd()
cwd()
ls()
q()
quit
q()
install.packages("rJava")
.libPaths()
a<- 563
s <- 294
a-s
aa <- 807
ss <- 429
aa-ss
4(1) + 3(.25) + 6(.1) + 2(.05) + 7(.01)
4*1 + 3*.25 + 6*.1 +2*.05 + 7*.01
11*pi
pi
install.packages("quantmod")
source("/Users/wlasiuk/Dropbox/desk.practiceR/trunk/getIDXratio.r")
install.packages("xts")
source("/Users/wlasiuk/Dropbox/desk.practiceR/trunk/getIDX.r")
ls()
tail gold
tail Gold
head (gold)
tail (gold)
source("/Users/wlasiuk/Dropbox/desk.practiceR/trunk/quantmodFun.r")
ls()
head AAPL
head (AAPL)
tail (AAPL)
sink ("~/ProgrammingMilk/RMilk/boom.R")
sink ("~/RMilk/boom.R")
ls
ls()
sink ("~/RMilk/boom.R")
ls()
sink ("~/RMilk/hackscratch/boom.R")
ls()
source ("~/RMilk/hackscratch/boom.R")
.libPaths()
names("a", "b")
ls()
head (AAPL)
head (a)
head (gold)
head (Gold)
head(r)
rm (r)
ls()
names (AAPL, "pride")
install.packages("blotter")
install.packages(blotter)
install.packages("PerformanceAnalytics")
update.packages("quantmod")
update.packages(quantmod)
update.packages("quantmod")
require("quantmod")
getSymbols("AAPL")
tail (AAPL)
chart_Series(AAPL)
chartSeries(AAPL)
help("chartSeries")
help("chart_Series")
ls()
rm(a)
rm (b)
rm(c)
ls()
rm (r)
chartSeries
chart_Series
names
update.packages("quantmode")
update.packages("quantmod")
install.packages("quantmod")
chart_Series
chartSeries
chart_Series
packageStatus()
update.packages()
chart_Series
installed.packages()
installed.packages("quantmod")
installed.packages(quantmod)
installed.packages()
chartSeries
chart_Series
auantmod ::: chart_Series
quantmod ::: chart_Series
quantmod:::chart_Series
version()
installed.packages()
help (uninstall.package)
??uninstall.package
help (install.package)
help ("install.package")
help ("install.packages")
chartSeries
remove.packages(quantmod)
remove.packages("quantmod")
chartSeries
install.packages("quantmod")
chartSeries
chart_Series
quantmod:::chartSeries
quantmod:::chart_Series
help(":::")
quantmod::chartSeries
quantmod:::chartSeries
install.packages("quantmod")
chartSeries
require("quantmod")
chartSeries
chart_Series
l
library(quantmod)#
library(TTR)#
library(PerformanceAnalytics)#
# pull IBM data from Yahoo Finance#
getSymbols("IBM",from="2003-01-01")#
# Introduce RSI Indicator#
IBM$RSI2 = RSI(Cl(IBM), 2)#
#Introduce Eponential Moving Average indicator#
IBM$EMA7=EMA(Cl(IBM), n=7, wilder=FALSE, ratio=NULL)#
IBM$EMA50=EMA(Cl(IBM), n=50, wilder=FALSE, ratio=NULL)#
IBM$EMA200=EMA(Cl(IBM), n=200, wilder=FALSE, ratio=NULL)#
#Introduce MACD indicator#
IBM$MACD26=MACD(Cl(IBM), nFast=12, nSlow=26, nSig=9)#
#Introduce ADX indicator#
IBM$ADX14=ADX(IBM, n=14)#
#results <-transform(IBM,RSI.IBM=RSI(Cl(IBM), 2),RETURN=ret ,TIME=as.character(index(IBM)))#
# remove 2003,2004,2005 in order to avoid NaN from EMA indicators#
# To maintain time it is necessary to conver in texts#
results <-transform(IBM["2006-01-01::2009-01-01"],TIME=as.character(index(IBM["2006-01-01::2009-01-01"])))
head (IBM)
cwd()
wd()
wd
getwd()
cwd("~/RMilk/hackscratch")
setwd("~/RMilk/hackscratch")
ls()
a
rm a
rm "a"
TLT
ls()
source("chartSeries.r")
source("chartSeries.r")
parent.env
emptyenv()
parent.env
